;; -*- mode: emacs-lisp -*-

(setq-default indent-tabs-mode nil)
(tool-bar-mode -1)
(global-set-key "\C-h" `delete-backward-char)
(setq make-backup-files nil) ; stop creating ~ files
(defalias 'yes-or-no-p 'y-or-n-p)

;; my keymap
(defun hx/duplicate-current-line()
  (interactive)
  (let ((p (point)))
    (move-beginning-of-line 1)
    (kill-line)
    (yank)
    (open-line 1)
    (next-line 1)
    (yank)
    (goto-char p))
)
(global-set-key (kbd "C-M-j") 'hx/duplicate-current-line)

;; Additional Repositories
(require 'package)
;; (add-to-list 'package-archives
;; 	     '("marmalade" . "http://marmalade-repo.org/packages/") t)
(add-to-list 'package-archives
	     '("melpa" . "https://melpa.org/packages/") t)
(add-to-list 'package-archives
	     '("gnu" . "https://elpa.gnu.org/packages/") t)

(package-initialize)

;; Install required packages
(let ((package-list '(auto-complete ido-vertical-mode haskell-mode emmet-mode exec-path-from-shell magit magit-gerrit auctex gradle-mode groovy-mode scala-mode typescript-mode markdown-mode antlr-mode ansi-color deferred ocp-indent tuareg dune yaml-mode xterm-color use-package projectile dired-subtree ag editorconfig)))
  (dolist (package package-list)
    (unless (package-installed-p package)
      (unless package-archive-contents
        (package-refresh-contents))
      (package-install package))))

(setq-default abbrev-mode t)
(global-set-key (kbd "C-'") 'expand-abbrev)

; Configure ido-mode
(require 'ido-vertical-mode)
(ido-mode t)
(ido-vertical-mode 1)
(setq ido-vertical-define-keys 'C-n-and-C-p-only)

(setq linum-format "%d ")
(global-linum-mode 1)

(column-number-mode t)

(add-hook 'haskell-mode-hook 'turn-on-haskell-indentation)
(add-hook 'haskell-mode-hook 'haskell-indentation-mode)
(add-hook 'haskell-mode-hook 'interactive-haskell-mode)

(exec-path-from-shell-initialize)

;; Configure editorconfig
(require 'editorconfig)
(editorconfig-mode 1)

;; Configure projectile
(require 'projectile)
(projectile-global-mode)
(setq projectile-completion-system 'ido)
(setq projectile-sort-order 'recentf-active)
(setq projectile-enable-caching t)
(setq projectile-file-exists-remote-cache-expire (* 1 60))

(setq-default mode-line-format
              (mapcar (lambda (elem)
                        (cond
                         ((eq elem 'mode-line-buffer-identification)
                          '(:eval
                            (if (buffer-file-name)
                                (propertized-buffer-identification
                                   (let* ((project-name (projectile-project-name))
                                          (project-root (projectile-project-root))
                                          (path-indicator (file-relative-name buffer-file-name project-root)))
                                     (if (and project-name path-indicator)
                                         (concat " " (buffer-name) " [" project-name "]"
                                                 (file-name-directory path-indicator))
                                       (concat " : %12b"))))
                                "%12b")))
                         (t elem)))
                      mode-line-format))

(global-set-key (kbd "M-p") 'projectile-commander)
(global-set-key (kbd "C-M-g") 'projectile-find-file)
(global-set-key (kbd "M-S") 'projectile-switch-open-project)

(defvar windows-before-compilation 0
  "Remember list of windows before compilation starts.")

(defun bury-compilation-buffer-if-successful-start-hook (proc)
  (message (concat "hello? " (length (window-list))))
  (setq windows-before-compilation (length (window-list))))

(defun bury-compile-buffer-if-successful (buffer string)
 "Close or focus the compilation buffer depending on the compilation result and user input.
  If the compilation is successful without warnings, it prompts the user to close the
  compilation window. If the user selects 'n', the focus moves to the compilation window.
  If the compilation fails, the focus automatically moves to the compilation window."
 (if (and
       (buffer-live-p buffer)
       (string-match "compilation" (buffer-name buffer))
       (string-match "finished" string)
       (with-current-buffer buffer
         (goto-char (point-min))
         (search-forward "Compilation finished" nil t)))
      (if (y-or-n-p "Close the compilation window? ")
          (let (;; (new-window-created
                ;;  (not
                ;;   (equal
                ;;   (length (window-list))
                ;;   windows-before-compilation)))
                (; we now force the compilation output window using a side window,
                 ; so there is no need to keep track and we could always close it
                 new-window-created t))
            (if new-window-created
                (progn
                  (delete-window (get-buffer-window buffer)))
              (switch-to-prev-buffer (get-buffer-window buffer) 'kill))
            )
        (select-window (get-buffer-window buffer)))
    (progn
      (select-window (get-buffer-window buffer))
      (message "Compilation failed.")))
 (remove-hook 'compilation-finish-functions 'bury-compile-buffer-if-successful)
 (setq windows-before-compilation 0))

(defun my-compile ()
  (interactive)
  (add-hook 'compilation-finish-functions 'bury-compile-buffer-if-successful)
  (setq windows-before-compilation (length (window-list)))
  (let*
      ((project-root (projectile-project-root))
       (process-environment (cons "CLICOLOR=0" process-environment))
       (default-directory
         (if project-root project-root
           (and (buffer-file-name)
                (file-name-directory (buffer-file-name))))))
    (call-interactively #'compile)))

(require 'bind-key)
(require 'tuareg)
(require 'dune)
(bind-key (kbd "C-c C-c") 'my-compile)
(define-key tuareg-mode-map (kbd "C-c C-c") 'my-compile)
(define-key dune-mode-map (kbd "C-c C-c") 'my-compile)

(push '("\\*compilation\\*"
        display-buffer-in-side-window
        (side . bottom) (slot . 1) (preserve-size . (nil . t)))
      display-buffer-alist)

; project subtree
; adopted from https://blog.mads-hartmann.com/2016/05/12/emacs-tree-view.html
; original author: Mads Hartmann <hello@mads-hartmann.com>
(setq dired-subtree-use-backgrounds nil)
(require 'dired)
(require 'dired-subtree)
(setq fit-window-to-buffer-horizontally t)
(setq window-resize-pixelwise t)
(defun dired-do-kill-lines-1 ()
  (interactive)
  (dired-do-kill-lines 1))
(defun dired-open-file-in-previous-frame ()
  "Open the selected file in the previous frame from dired."
  (interactive)
  (let ((file (dired-get-file-for-visit))
        (current-frame (selected-frame))
        (previous-frame nil))

    (when (file-readable-p file)
      (setq previous-frame (previous-frame current-frame))
      (select-frame previous-frame)
      (find-file file)
      (select-frame current-frame))))
(define-key dired-mode-map (kbd "<tab>") 'dired-subtree-toggle)
(define-key dired-mode-map "e" 'fit-window-to-buffer)
(define-key dired-mode-map "K" 'dired-do-kill-lines-1)
(define-key dired-mode-map (kbd "O") 'dired-open-file-in-previous-frame)

(defun mhj/toggle-project-explorer (flag)
  "Toggle the project explorer window."
  (interactive "P")
  (let* ((buffer (dired-noselect (projectile-project-root)))
    (window (get-buffer-window buffer)))
    (if window
    (mhj/hide-project-explorer)
      (mhj/show-project-explorer flag))))
(defun mhj/show-project-explorer (&optional flag)
  "Project dired buffer on the side of the frame.
Shows the projectile root folder using dired on the left side of
the frame and makes it a dedicated window for that buffer."
  (let ((buffer (dired-noselect (projectile-project-root))))
    (if flag
        (let ((displayed-frame nil))
          ;; Check if buffer is displayed in any frame
          (dolist (frame (frame-list))
            (let ((windows (window-list frame)))
              (when (find-if (lambda (w) (equal (window-buffer w) buffer)) windows)
                (setq displayed-frame frame))))

          ;; If displayed frame is found, focus it; otherwise, create a new frame to display buffer
          (if displayed-frame
              (select-frame-set-input-focus displayed-frame)
            (display-buffer buffer '(display-buffer-pop-up-frame))))
      (progn
        (display-buffer-in-side-window
         buffer
         '((side . left)
           (window-width . 0.2)
           (window-preserved-size (nill . nill))))
        (set-window-dedicated-p (get-buffer-window buffer) t)
        (select-window (get-buffer-window buffer))))))
(defun mhj/hide-project-explorer ()
  "Hide the project-explorer window."
  (let ((buffer (dired-noselect (projectile-project-root))))
    (progn
      (delete-window (get-buffer-window buffer)))))
(global-set-key (kbd "M-e") 'mhj/toggle-project-explorer)

;; ocaml related
(defun dune-jump-to-build-dir ()
  "Jump to the corresponding directory of the current buffer's file in the _build folder."
  (interactive)
  (let* ((default-directory (projectile-project-root))
         (relative-file-dir (file-name-directory (file-relative-name buffer-file-name default-directory)))
         (build-dir "_build/default")
         (target-dir (concat default-directory build-dir "/" relative-file-dir)))
    (if (file-directory-p target-dir)
        (dired target-dir)
      (message "Directory not found in _build: %s" target-dir))))
(defun dune-jump-from-build-dir ()
  "Jump back from the current buffer's file in the _build directory to the corresponding file outside of it."
  (interactive)
  (let* ((build-dir-regexp ".*/_build/default/")
         (root-path (file-name-directory (buffer-file-name)))
         (relative-file-name (replace-regexp-in-string build-dir-regexp "" root-path))
         (default-directory (unless (string= root-path relative-file-name)
                              (locate-dominating-file root-path "dune-project")))
         (source-file (concat default-directory relative-file-name (file-name-nondirectory (buffer-file-name))))
         )
    (if (and default-directory (file-exists-p source-file))
        (find-file source-file)
      (message "Corresponding source file not found: %s" source-file))))

;; ;; for Proof General
;; (load-file "/usr/local/share/emacs/site-lisp/ProofGeneral/generic/proof-site.el")
;; (setq coq-prog-name "/usr/local/bin/coqtop")

(defun reverse-other-frame (arg)
  "Cycle through frames in reverse order."
  (interactive "P")
  (other-frame (- (if (null arg) 1 (prefix-numeric-value arg)))))
(global-set-key (kbd "C-S-o") 'reverse-other-frame)
(global-set-key (kbd "M-O") 'other-frame)
(global-set-key (kbd "M-\\") "λ")
(global-set-key (kbd "C-M-\\") "Λ")
(electric-pair-mode t)
(show-paren-mode t)

(require 'ox-latex)
(plist-put org-format-latex-options :scale 1.5)
(add-to-list 'org-latex-packages-alist
             '("" "tikz" t))
(eval-after-load "preview"
  '(add-to-list 'preview-default-preamble "\\PreviewEnvironment{tikzpicture} t"))
(setq org-latex-create-formula-image-program 'imagemagick)
;; active Babel languages
(org-babel-do-load-languages
 'org-babel-load-languages
 '((R . t)
   (latex . t)
   (ditaa . t)
   (C . t)
;;   (asymptote . t)
   ))
(setf org-html-mathjax-options
      '((path "https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_SVG")))
(setf org-html-mathjax-template
      "<script type=\"text/javascript\" src=\"%PATH\"></script>")
(defmacro by-backend (&rest body)
  `(case (if (boundp 'backend) (org-export-backend-name backend) nil) ,@body))
(setq org-confirm-babel-evaluate nil)
(setq org-babel-latex-htlatex "htlatex")

(put 'narrow-to-region 'disabled nil)

(if (file-exists-p "/usr/local/share/asymptote")
    (progn
      (add-to-list 'load-path "/usr/local/share/asymptote")
      (autoload 'asy-mode "asy-mode.el" "Asymptote major mode." t)
      (autoload 'lasy-mode "asy-mode.el" "hybrid Asymptote/Latex major mode." t)
      (autoload 'asy-insinuate-latex "asy-mode.el" "Asymptote insinuate LaTeX." t)
      (add-to-list 'auto-mode-alist '("\\.asy$" . asy-mode))))

(defun remove-org-newlines-at-cjk-text (&optional _mode)
  "先頭が '*', '#', '|' でなく、改行の前後が日本の文字の場合はその改行を除去する。"
  (interactive)
  (goto-char (point-min))
  (while (re-search-forward "^\\([^|#*\n].+\\)\\(.\\)\n *\\(.\\)" nil t)
    (if (and (> (string-to-char (match-string 2)) #x2000)
               (> (string-to-char (match-string 3)) #x2000))
        (replace-match "\\1\\2\\3"))
    (goto-char (point-at-bol))))

(with-eval-after-load "ox"
  (add-hook 'org-export-before-processing-hook 'remove-org-newlines-at-cjk-text))

;; emacs-mac specific settings
(setq mac-command-modifier nil)
(setq mac-option-modifier 'meta)

;; HTML related
(require 'emmet-mode)
(add-hook 'sgml-mode-hook 'emmet-mode)
(add-hook 'css-mode-hook 'emmet-mode)
(add-hook 'emmet-mode-hook (lambda () (setq emmet-indention 2)))
(eval-after-load "emmet-mode"
  '(define-key emmet-mode-keymap (kbd "TAB") 'indent-for-tab-command))
(eval-after-load "emmet-mode"
  '(define-key emmet-mode-keymap (kbd "C-j") nil))
(eval-after-load "emmet-mode"
  '(define-key emmet-mode-keymap (kbd "C-i") nil))
(eval-after-load "emmet-mode"
  '(progn
     (keyboard-translate ?\C-i ?\H-i)
     (define-key emmet-mode-keymap (kbd "H-i") 'emmet-expand-line)))

;; spelling check related
(setq ispell-program-name "aspell")

(require 'ps-print)
(setq ps-lpr-switches (quote ("-o media=A4")))
(setq ps-line-number t)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(TeX-view-program-list '(("TeXShop" ("open -aTeXShop %o"))))
 '(TeX-view-program-selection '((output-pdf "TeXShop")))
 '(column-number-mode t)
 '(package-selected-packages
   '(editorconfig editorconfig-mode typescriptf-mode dired-subtree use-package dired ag projectile ocp-indent xterm-color cmake-mode yaml-mode proof-general dockerfile-mode clojure-mode livereload deferred dune auto-complete tuareg ddskk-posframe ddskk paredit pipenv hy-mode company markdown-mode scala-mode groovy-mode gradle-mode auctex magit-gerrit magit exec-path-from-shell emmet-mode haskell-mode ido-vertical-mode editorconfig-mod))
 '(safe-local-variable-values
   '((cider-shadow-cljs-default-options . "app")
     (cider-default-cljs-repl . shadow)
     (eval orgtbl-mode t)
     (TeX-parse-self . t)
     (whitespace-line-column . t)
     (lexical-binding . t)))
 '(show-paren-mode t)
 '(tool-bar-mode nil))

;; bind M-g M-s to magit-status
(require 'magit)
(global-set-key (kbd "M-g M-s") (quote magit-status))

;; automatically enabling flyspell-mode and auto-fill-mode in some modes
(dolist (hook '(text-mode-hook))
  (add-hook hook (lambda () (flyspell-mode 1))))
(dolist (hook '(text-mode-hook))
  (add-hook hook (lambda () (auto-fill-mode 1))))

;; settings for javascript-mode
(setq js-indent-level 2)
(add-hook 'js-mode-hook
          (lambda ()
            (push '("function " . ?ƒ) prettify-symbols-alist)
            (push '("return " . ?^) prettify-symbols-alist)
            (prettify-symbols-mode)))

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(gopcaml-zipper-face ((t (:background "light green")))))

;; include local and platform profile
(defun load-file-if-exists (path)
  (if (file-exists-p path)
      (load-file path)
    nil))

(load-file-if-exists "~/.emacs.platform")
(load-file-if-exists "~/.emacs.local")

(setq ring-bell-function 'ignore)

;; configure web mode
(setq-default css-indent-offset 2)

;; configure compilation window
(require 'ansi-color)
(defun colorize-compilation-buffer ()
  (toggle-read-only)
  (ansi-color-apply-on-region compilation-filter-start (point))
  (toggle-read-only))
(add-hook 'compilation-filter-hook 'colorize-compilation-buffer)

(require 'xterm-color)
(setq compilation-environment '("TERM=xterm-256color"))


(defun sync-theme ()
  "Sync color theme for console/gui"
  (interactive)
  (if (display-graphic-p)
      (disable-theme 'deeper-blue)
    (enable-theme 'deeper-blue)))

