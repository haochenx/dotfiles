;; -*- mode: emacs-lisp -*-

(setq-default indent-tabs-mode nil)
(tool-bar-mode -1)
(global-set-key "\C-h" `delete-backward-char)
(setq make-backup-files nil) ; stop creating ~ files

;; Additional Repositories
(require 'package)
;; (add-to-list 'package-archives
;; 	     '("marmalade" . "http://marmalade-repo.org/packages/") t)
(add-to-list 'package-archives
	     '("melpa" . "https://melpa.org/packages/") t)
(add-to-list 'package-archives
	     '("gnu" . "https://elpa.gnu.org/packages/") t)

(package-initialize)

;; Install required packages
(let ((package-list '(auto-complete ido-vertical-mode haskell-mode emmet-mode exec-path-from-shell magit magit-gerrit auctex gradle-mode groovy-mode scala-mode markdown-mode antlr-mode ansi-color deferred ocp-indent tuareg yaml-mode xterm-color)))
  (dolist (package package-list)
    (unless (package-installed-p package)
      (unless package-archive-contents
        (package-refresh-contents))
      (package-install package))))

(setq-default abbrev-mode t)
(global-set-key (kbd "C-'") 'expand-abbrev)

; Configure ido-mode
(require 'ido-vertical-mode)
(ido-mode t)
(ido-vertical-mode 1)
(setq ido-vertical-define-keys 'C-n-and-C-p-only)

(setq linum-format "%d ")
(global-linum-mode 1)

(column-number-mode t)

(add-hook 'haskell-mode-hook 'turn-on-haskell-indentation)
(add-hook 'haskell-mode-hook 'haskell-indentation-mode)
(add-hook 'haskell-mode-hook 'interactive-haskell-mode)

(exec-path-from-shell-initialize)

;; ;; for Proof General
;; (load-file "/usr/local/share/emacs/site-lisp/ProofGeneral/generic/proof-site.el")
;; (setq coq-prog-name "/usr/local/bin/coqtop")

(global-set-key (kbd "C-S-o") 'other-frame)
(global-set-key (kbd "M-\\") "λ")
(global-set-key (kbd "C-M-\\") "Λ")
(electric-pair-mode t)
(show-paren-mode t)

(require 'ox-latex)
(plist-put org-format-latex-options :scale 1.5)
(add-to-list 'org-latex-packages-alist
             '("" "tikz" t))
(eval-after-load "preview"
  '(add-to-list 'preview-default-preamble "\\PreviewEnvironment{tikzpicture} t"))
(setq org-latex-create-formula-image-program 'imagemagick)
;; active Babel languages
(org-babel-do-load-languages
 'org-babel-load-languages
 '((R . t)
   (latex . t)
   (ditaa . t)
   (C . t)
;;   (asymptote . t)
   ))
(setf org-html-mathjax-options
      '((path "https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_SVG")))
(setf org-html-mathjax-template
      "<script type=\"text/javascript\" src=\"%PATH\"></script>")
(defmacro by-backend (&rest body)
  `(case (if (boundp 'backend) (org-export-backend-name backend) nil) ,@body))
(setq org-confirm-babel-evaluate nil)
(setq org-babel-latex-htlatex "htlatex")

(put 'narrow-to-region 'disabled nil)

(if (file-exists-p "/usr/local/share/asymptote")
    (progn
      (add-to-list 'load-path "/usr/local/share/asymptote")
      (autoload 'asy-mode "asy-mode.el" "Asymptote major mode." t)
      (autoload 'lasy-mode "asy-mode.el" "hybrid Asymptote/Latex major mode." t)
      (autoload 'asy-insinuate-latex "asy-mode.el" "Asymptote insinuate LaTeX." t)
      (add-to-list 'auto-mode-alist '("\\.asy$" . asy-mode))))

(defun remove-org-newlines-at-cjk-text (&optional _mode)
  "先頭が '*', '#', '|' でなく、改行の前後が日本の文字の場合はその改行を除去する。"
  (interactive)
  (goto-char (point-min))
  (while (re-search-forward "^\\([^|#*\n].+\\)\\(.\\)\n *\\(.\\)" nil t)
    (if (and (> (string-to-char (match-string 2)) #x2000)
               (> (string-to-char (match-string 3)) #x2000))
        (replace-match "\\1\\2\\3"))
    (goto-char (point-at-bol))))

(with-eval-after-load "ox"
  (add-hook 'org-export-before-processing-hook 'remove-org-newlines-at-cjk-text))

;; emacs-mac specific settings
(setq mac-command-modifier nil)
(setq mac-option-modifier 'meta)

;; HTML related
(require 'emmet-mode)
(add-hook 'sgml-mode-hook 'emmet-mode)
(add-hook 'css-mode-hook 'emmet-mode)
(add-hook 'emmet-mode-hook (lambda () (setq emmet-indention 2)))
(eval-after-load "emmet-mode"
  '(define-key emmet-mode-keymap (kbd "TAB") 'indent-for-tab-command))
(eval-after-load "emmet-mode"
  '(define-key emmet-mode-keymap (kbd "C-j") nil))
(eval-after-load "emmet-mode"
  '(define-key emmet-mode-keymap (kbd "C-i") nil))
(eval-after-load "emmet-mode"
  '(progn
     (keyboard-translate ?\C-i ?\H-i)
     (define-key emmet-mode-keymap (kbd "H-i") 'emmet-expand-line)))

;; spelling check related
(setq ispell-program-name "aspell")

(require 'ps-print)
(setq ps-lpr-switches (quote ("-o media=A4")))
(setq ps-line-number t)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(TeX-view-program-list (quote (("TeXShop" ("open -aTeXShop %o")))))
 '(TeX-view-program-selection (quote ((output-pdf "TeXShop"))))
 '(column-number-mode t)
 '(package-selected-packages
   (quote
    (ocp-indent xterm-color cmake-mode yaml-mode proof-general dockerfile-mode clojure-mode livereload deferred dune auto-complete tuareg ddskk-posframe ddskk paredit pipenv hy-mode company markdown-mode scala-mode groovy-mode gradle-mode auctex magit-gerrit magit exec-path-from-shell emmet-mode haskell-mode ido-vertical-mode)))
 '(safe-local-variable-values
   (quote
    ((cider-shadow-cljs-default-options . "app")
     (cider-default-cljs-repl . shadow)
     (eval orgtbl-mode t)
     (TeX-parse-self . t)
     (whitespace-line-column . t)
     (lexical-binding . t))))
 '(show-paren-mode t)
 '(tool-bar-mode nil))

;; bind M-g M-s to magit-status
(require 'magit)
(global-set-key (kbd "M-g M-s") (quote magit-status))

;; automatically enabling flyspell-mode and auto-fill-mode in some modes
(dolist (hook '(text-mode-hook))
  (add-hook hook (lambda () (flyspell-mode 1))))
(dolist (hook '(text-mode-hook))
  (add-hook hook (lambda () (auto-fill-mode 1))))

;; settings for javascript-mode
(setq js-indent-level 2)
(add-hook 'js-mode-hook
          (lambda ()
            (push '("function " . ?ƒ) prettify-symbols-alist)
            (push '("return " . ?^) prettify-symbols-alist)
            (prettify-symbols-mode)))

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(gopcaml-zipper-face ((t (:background "light green")))))

;; include local and platform profile
(defun load-file-if-exists (path)
  (if (file-exists-p path)
      (load-file path)
    nil))

(load-file-if-exists "~/.emacs.platform")
(load-file-if-exists "~/.emacs.local")

(setq ring-bell-function 'ignore)

;; configure web mode
(setq-default css-indent-offset 2)

;; configure compilation window
(require 'ansi-color)
(defun colorize-compilation-buffer ()
  (toggle-read-only)
  (ansi-color-apply-on-region compilation-filter-start (point))
  (toggle-read-only))
(add-hook 'compilation-filter-hook 'colorize-compilation-buffer)

(require 'xterm-color)
(setq compilation-environment '("TERM=xterm-256color"))


(defun sync-theme ()
  "Sync color theme for console/gui"
  (interactive)
  (if (display-graphic-p)
      (disable-theme 'deeper-blue)
    (enable-theme 'deeper-blue)))

